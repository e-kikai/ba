- if sums.blank?
  . 集計結果がありません
- elsif all_count == 0
  . データがありません
- elsif !sums.kind_of?(Hash)
  table.table.table-bordered.table-hover.table-condensed.sum-table
    tr
      td.integer
        h2
          = link_to number_with_delimiter(sums), {action: :search, s: search_query}
          .percent = "#{(sums.to_f * 100 / all_count).round(2)}%"
      
- elsif !sums.first[0].kind_of?(Array)
  - company_klass = @client.company_table.klass
  table.table.table-bordered.table-striped.table-hover.table-condensed.sum-table
    - sums.sort_by { |k, v| v.to_f }.each do |k, v|
      tr
        th
          - if sum_query.dig("axis", 0, "column") == "company_id"
            = "#{k} : #{company_klass.find(k).try(:name)}"
          - else
            = k
        td.integer
          = link_to number_with_delimiter(v || 0), {action: :search, s: search_query.merge({sum_query.dig("axis", 0, "column") => {v: k, c: :in}})}
          .percent = "#{(v.to_f * 100 / all_count).round(2)}%"
      
- else
  - x_group = sums.map { |k, v| k[0] }.uniq.sort
  - y_group = sums.map { |k, v| k[1] }.uniq.sort
  
  table.table.table-bordered.table-striped.table-hover.table-condensed.sum-table
    tr
      th
      - x_group.each do |x|
        th.x = x
    - y_group.each do |y|
      tr
        th.y = y
        - x_group.each do |x|
          td.integer
            - if sums[[x, y]].present?
              = link_to number_with_delimiter(sums[[x, y]]), {action: :search, s: search_query.merge({sum_query.dig("axis", 0, "column") => {v: x, c: :in}, sum_query.dig("axis", 1, "column") => {v: y, c: :in}})}
              .percent = "#{(sums[[x, y]].to_f * 100 / all_count).round(2)}%"
              
            - else
              = 0
