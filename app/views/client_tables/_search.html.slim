.container-fluid.search-menu
  = button_tag type: :button, class: "btn btn-primary option", data: { toggle: :modal, target: "#serach_form" } do
    span.glyphicon.glyphicon-menu-hamburger
    =< "検索フォーム"

  = link_to "#{request.path_info}", class: "btn btn-warning" do
    span.glyphicon.glyphicon-remove
    =< "検索条件をリセット"
  - if ba
    = link_to({action: "data_new"}, class: "btn btn-success") do
      span.glyphicon.glyphicon-plus
      =< "データを新規登録"
#serach_form.modal.fade abindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"
  .modal-dialog.modal-lg
    .modal-content
      .modal-header
        = button_tag type: :button, class: :close, data: { dismiss: :modal } do
          span.glyphicon.glyphicon-remove
        h4 検索フォーム
      .modal-body
        = form_tag({}, method: :get) do
          = render "client_tables/search_form", table: @table, s: params[:s]
          
          hr
          
          - s_options = @table.columns_options.inject([]) do |res, v|
            - res += [["#{v[0]} 昇順", v[1]], ["#{v[0]} 降順", "#{v[1]} desc"]]
          
          .form-group.col-md-6
            h5.col-md-3 ソート
            .col-md-9
              = select_tag "s[s]", options_for_select(s_options, params.dig(:s, :s)), class: "form-control"

          / = label_tag :order_column, "ソート"
          / .form-group
          /   .col-md-7
          /     = select_tag "order[column]", options_for_select(@table.columns_options, params.dig(:order, :column)), class: "form-control"
          /   .col-md-5
          /     = select_tag "order[type]", options_for_select({"昇順" => "", "降順" => "desc"}, params.dig(:order, :type)), class: "form-control"
          br
          .form-group
            = button_tag data: { "disable-with" => "検索中..."}, class: "btn btn-primary center-block" do
              span.glyphicon.glyphicon-search
              =< "検索"

.col-md-12
  / = @pdatas.to_sql
  / = params.to_s
  / = @shaping_params.to_s
  
  / - restext = Array(params[:s]).inject("") do |t, s|
  /   - if s[:column_name].blank? || s[:cond].blank?
  /     - t
  /   - elsif !(s[:value].present? || ClientTable::COND_NOVALS.include?(s[:cond]))
  /     - t
    / - else
    /   - t << "かつ、" if t.present?
    /   - t << "#{@table.columns_options.key(s[:column_name])}が"
    /   - t << "「#{s[:value]}」" unless ClientTable::COND_NOVALS.include?(s[:cond])
    /   - t << "#{ClientTable::CONDITIONS.key(s[:cond])}"
  - restext  = ""
    
  h5
     / = "#{restext.presence || "全件取得"} : "
     = "#{number_with_delimiter(@pdatas.total_count)}件"
  
  - if @pdatas.present?
    - sumally = @show_columns.select { |co| co.sumally }.inject('') do |res, co|
      - res += "、#{co.name}ありが#{number_with_delimiter(@datas.presents(co.column_name).count(:id))}件"

    div
      - if sumally.present?
        | うち#{sumally}
    
    .page-area
      | #{number_with_delimiter(@pdatas.offset_value + 1)}件 〜 
      | #{number_with_delimiter(@pdatas.offset_value + @pdatas.length)}件を表示中

      = paginate @pdatas
      = link_to "#{request.path_info}.csv?#{request.query_string}", class: "btn btn-warning" do
        span.glyphicon.glyphicon-save-file
        =< "検索結果をエクスポート"
    
    / .embed-responsive.embed-responsive-16by9 style="overflow:scroll;"
      / .table-responsive
    .scroll_div
      table.table.table-bordered.table-striped.table-hover.table-condensed.search-table _fixedhead='rows:1'
        tr
          th
            | ID
            =< column_sorter :id

          - if ba
            th 変更
          - @show_columns.each do |co|
            th class="#{co.db_type} #{co.column_type} #{co.column_name}"
              = co.name
              =< column_sorter co.column_name
          - if @table.company?
            - child_tables = @client.child_tables
            - child_tables.each do |ch|
              th.id = ch.name
            
          th.datetime
            | 登録日時
            =< column_sorter :created_at

          th.datetime
            | 変更日時
            =< column_sorter :updated_at
        - @pdatas.each do |d|
          tr
            td.id
              = link_to d[:id], {action: :data_show, data_id: d[:id]}
            - if ba
              td.icon.edit = link_to({action: :data_edit, data_id: d[:id]}) do
                span.glyphicon.glyphicon-edit
            - @show_columns.each do |co|
              td class="#{co.db_type} #{co.column_type} #{co.column_name}"
                - if co.column_name == "name"
                  = link_to column_format(d[co.column_name], co.column_type), {action: :data_show, data_id: d[:id]}
                - elsif co.column_name == "company_id" && d.company_id.present?
                  = link_to "#{d.company_id} : #{d.company_name}", {action: :data_show, id: @client.company_table.id, data_id: d.company_id}
                - elsif d[co.column_name].present?
                  = column_format(d[co.column_name], co.column_type)
                  
            - if @table.company?
              - child_tables.each do |ch|
                td.id
                  - if d["#{ch.table_name}_count"].present?
                    = link_to("#{d["#{ch.table_name}_count"]}件", {client_id: @table.client_id, id: ch.id, "s[][column_name]" => :company_id, "s[][value]" => d[:id], "s[][cond]" => :eq})

            td.datetime = d[:created_at]
            td.datetime = d[:updated_at]
